from __future__ import annotations
from typing import Protocol, Dict, Any, Optional, List


class TokenProvider(Protocol):
    def get_token(self) -> str: ...


class TodoRepository(Protocol):
    # Lists
    def list_lists(self) -> Dict[str, Any]: ...
    def create_list(self, display_name: str) -> Dict[str, Any]: ...
    def update_list(self, list_id: str, display_name: str) -> Dict[str, Any]: ...
    def delete_list(self, list_id: str) -> Dict[str, Any]: ...

    # Tasks
    def list_tasks(self, list_id: str, *, filter_expr: Optional[str] = None, top: Optional[int] = None) -> Dict[str, Any]: ...
    def create_task(
        self,
        list_id: str,
        title: str,
        *,
        body: Optional[str] = None,
        due: Optional[str] = None,
        time_zone: Optional[str] = None,
        reminder: Optional[str] = None,
        importance: Optional[str] = None,
        status: Optional[str] = None,
        recurrence: Optional[Dict[str, Any]] = None,
    ) -> Dict[str, Any]: ...
    def update_task(self, list_id: str, task_id: str, patch: Dict[str, Any]) -> Dict[str, Any]: ...
    def delete_task(self, list_id: str, task_id: str) -> Dict[str, Any]: ...

    # Convenience task ops
    def complete_task(self, list_id: str, task_id: str) -> Dict[str, Any]: ...
    def reopen_task(self, list_id: str, task_id: str) -> Dict[str, Any]: ...
    def snooze_task(self, list_id: str, task_id: str, remind_at_iso: str, tz: str = "Asia/Seoul") -> Dict[str, Any]: ...

    # Lite / Delta utilities
    def list_tasks_lite(self, list_id: str, top: int = 20) -> Dict[str, Any]: ...
    def list_tasks_all_lite(self, list_id: str, page_size: int = 100) -> Dict[str, Any]: ...
    def complete_task_lite(self, list_id: str, task_id: str) -> str: ...
    def snooze_task_lite(self, list_id: str, task_id: str, remind_at_iso: str, tz: str = "Asia/Seoul") -> str: ...
    def delta_lists(self, delta_link: Optional[str] = None) -> Dict[str, Any]: ...
    def delta_tasks(self, list_id: str, delta_link: Optional[str] = None) -> Dict[str, Any]: ...
    def walk_delta_lists(self, delta_link: Optional[str] = None) -> Dict[str, Any]: ...
    def walk_delta_tasks(self, list_id: str, delta_link: Optional[str] = None) -> Dict[str, Any]: ...
